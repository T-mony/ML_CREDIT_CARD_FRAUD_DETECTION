# -*- coding: utf-8 -*-
"""Credit card fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/133df1YobnabgyKN2ihr9CsdddU-8TPvJ
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler

#Load Dataset to a Pandas DataFrame
df = pd.read_csv('/content/drive/MyDrive/Workshop/creditcard.csv')

df.head()

df.tail()

df.isnull().sum()

missing_colums = df.columns[df.isnull().any()]
print(missing_colums)

df.info()

# Check the distribution of legit and fake transaction
df['Class'].value_counts()

"""Data set is unbalanced

0-> legit
1 -> Fraud
"""

legit = df[df.Class == 0]
Fraud = df[df.Class == 1]

#Sample data
categories = ['legit', 'Fraud']
counts = df['Class'].value_counts()

#Bar plot
plt.bar(categories, counts, color =['orange', 'red'])
plt.xlabel('Transaction Type')
plt.ylabel('Count')
plt.title(' Credit card fraud chart, ')
plt.show()

legit.Amount.describe()

Fraud.Amount.describe()

#Compare the values for both transactions
df.groupby('Class').mean()

"""Because it is unbalanced we will use under sampling

Build a sample dataset containing distribution of normal transaction
"""

legit_sample = legit.sample(n=492)

"""Concatenate dataframes"""

new_dataset = pd.concat([legit_sample, Fraud], axis=0)

new_dataset.head()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Split the Features"""

X = new_dataset.drop(columns= 'Class',axis=1)
Y = new_dataset['Class']

print(X)

"""Slpit the data into Train data and Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Train the Logistic Regression Model with Training Data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# Accuray on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('accuracy:', training_data_accuracy)

#Accuracy of test data
x_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(x_test_prediction, Y_test)

print (test_data_accuracy)

!git remote add origin https://github.com/T-mony/Credit-Card-Fraud-Detection.git

!git push origin main

from sklearn.metrics import precision_score, recall_score, f1_score

# Precision, Recall, and F1-score on training data
train_precision = precision_score(Y_train, X_train_prediction)
train_recall = recall_score(Y_train, X_train_prediction)
train_f1 = f1_score(Y_train, X_train_prediction)

print(f'Training Data Precision: {train_precision:.4f}')
print(f'Training Data Recall: {train_recall:.4f}')
print(f'Training Data F1-score: {train_f1:.4f}')

# Precision, Recall, and F1-score on test data
test_precision = precision_score(Y_test, x_test_prediction)
test_recall = recall_score(Y_test, x_test_prediction)
test_f1 = f1_score(Y_test, x_test_prediction)

print(f'Test Data Precision: {test_precision:.4f}')
print(f'Test Data Recall: {test_recall:.4f}')
print(f'Test Data F1-score: {test_f1:.4f}')

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/T-mony/ML_CREDIT_CARD_FRAUD_DETECTION
# %cd ML_CREDIT_CARD_FRAUD_DETECTION

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/testimony-ai/defect-detector.git
# %cd defect-detector

# save a file
with open("model.py", "w") as f:
    f.write("print('Anomaly detection model')")

!git config --global user.email "testitutie@gmail.com"
!git config --global user.name "T-mony"

!git add .
!git commit -m "Upload autoencoder code from Colab"
!git push https://testimony-ai:ghp_ABC123456789TOKEN@github.com/testimony-ai/defect-detector.git

Credit card fraud.ipynb